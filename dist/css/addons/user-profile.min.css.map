{"version":3,"sources":["..\\..\\..\\scss\\addons\\_user-profile-card.scss","..\\..\\..\\node_modules\\bootstrap\\scss\\mixins\\_breakpoints.scss"],"names":[],"mappings":"AAeA,WACC,QAAA,KACA,eAAA,OACA,SAAA,SACA,cAAA,QACA,iBAAA,KAEA,kBACC,SAAA,SACA,OAAA,SACA,iBAAA,QACA,kBAAA,UACA,oBAAA,OAAA,OACA,gBAAA,MCmCE,yBDzCH,kBASE,OAAA,UAIF,gBACC,SAAA,SACA,QAAA,QAAA,SAGD,kBACC,SAAA,SACA,OAAA,UACA,KAAA,qBACA,MAAA,QACA,OAAA,QACA,cAAA,IACA,OAAA,SAAA,MAAA,KACA,iBAAA,QACA,kBAAA,UACA,oBAAA,OAAA,OACA,gBAAA,MCYE,yBDvBH,kBAcE,KAAA,UAIF,gBACC,YAAA,SACA,eAAA,SACA,WAAA,OCEE,yBDLH,gBAME,WAAA,MAGD,oCACC,QAAA,MACA,UAAA,SACA,YAAA,IAGD,oCACC,UAAA,KACA,MAAA,QAIF,uBACC,OAAA,EAGD,mBACC,YAAA,SACA,WAAA,OAEA,0BACC,eAAA,UACA,UAAA,SACA,MAAA,QAGD,4BACC,UAAA","sourcesContent":["/* --- User Profile Card --- */\r\n\r\n$user-profile-avatar-size:\t\t\t6.25rem !default;\r\n$user-profile-avatar-border-width:\t.1875rem !default;\r\n\r\n$user-profile-header-height:\t\t8.125rem !default;\r\n$user-profile-header-height-md:\t\t18.75rem !default;\r\n\r\n$user-profile-fullname-font-size:\t$font-size-base * 1.385 !default;\r\n$user-profile-username-color:\t\tshift-color($gray-600, -20%) !default;\r\n$user-profile-username-font-size:\t$font-size-base !default;\r\n\r\n$user-profile-counter-font-size:\t$font-size-base * 1.385 !default;\r\n$user-profile-counter-title-color:\t$user-profile-username-color !default;\r\n\r\n.user-card {\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n\tposition: relative;\r\n\tborder-radius: $card-border-radius;\r\n\tbackground-color: $white;\r\n\r\n\t&-header {\r\n\t\tposition: relative;\r\n\t\theight: $user-profile-header-height;\r\n\t\tbackground-color: darken($white, 5%);\r\n\t\tbackground-repeat: no-repeat;\r\n\t\tbackground-position: center center;\r\n\t\tbackground-size: cover;\r\n\t\t\r\n\t\t@include media-breakpoint-up(md) {\r\n\t\t\theight: $user-profile-header-height-md;\r\n\t\t}\r\n\t}\r\n\r\n\t&-body {\r\n\t\tposition: relative;\r\n\t\tpadding: ($card-spacer-y * .5) $card-spacer-x;\r\n\t}\r\n\r\n\t&-avatar {\r\n\t\tposition: absolute;\r\n\t\tbottom: -$user-profile-avatar-size * .5;\r\n\t\tleft: subtract(50%, ($user-profile-avatar-size * .5));\r\n\t\twidth: $user-profile-avatar-size;\r\n\t\theight: $user-profile-avatar-size;\r\n\t\tborder-radius: 50%;\r\n\t\tborder: $user-profile-avatar-border-width solid $white;\r\n\t\tbackground-color: $light;\r\n\t\tbackground-repeat: no-repeat;\r\n\t\tbackground-position: center center;\r\n\t\tbackground-size: cover;\r\n\t\t\r\n\t\t@include media-breakpoint-up(md) {\r\n\t\t\tleft: $card-spacer-x;\r\n\t\t}\r\n\t}\r\n\r\n\t&-info {\r\n\t\tpadding-top: ($user-profile-avatar-size * .5);\r\n\t\tpadding-bottom: $card-spacer-x;\r\n\t\ttext-align: center;\r\n\t\t\r\n\t\t@include media-breakpoint-up(md) {\r\n\t\t\ttext-align: left;\r\n\t\t}\r\n\r\n\t\t.user-card-fullname {\r\n\t\t\tdisplay: block;\r\n\t\t\tfont-size: $user-profile-fullname-font-size;\r\n\t\t\tfont-weight: $font-weight-bold;\r\n\t\t}\r\n\r\n\t\t.user-card-username {\r\n\t\t\tfont-size: $user-profile-username-font-size;\r\n\t\t\tcolor: $user-profile-username-color;\r\n\t\t}\r\n\t}\r\n\t\r\n\t&-description {\r\n\t\tmargin: 0;\r\n\t}\r\n\r\n\t&-details {\r\n\t\tpadding-top: $card-spacer-x;\r\n\t\ttext-align: center;\r\n\t\t\r\n\t\t.title {\r\n\t\t\ttext-transform: uppercase;\r\n\t\t\tfont-size: $font-size-sm;\r\n\t\t\tcolor: $user-profile-counter-title-color;\r\n\t\t}\r\n\r\n\t\t.counter {\r\n\t\t\tfont-size: $user-profile-counter-font-size;\r\n\t\t}\r\n\t}\r\n}\r\n","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @if not $n {\n    @error \"breakpoint `#{$name}` not found in `#{$breakpoints}`\";\n  }\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width.\n// The maximum value is reduced by 0.02px to work around the limitations of\n// `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(md, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $max: map-get($breakpoints, $name);\n  @return if($max and $max > 0, $max - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min:  breakpoint-min($name, $breakpoints);\n  $next: breakpoint-next($name, $breakpoints);\n  $max:  breakpoint-max($next);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($next, $breakpoints) {\n      @content;\n    }\n  }\n}\n"]}